name: Release
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: true

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Get the previous tag
      - name: Get latest tag
        id: previoustag
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT

      # Collect merged PRs
      - name: Collect merged PRs
        id: collect_prs
        run: |
          # Features
          FEATURES=$(gh pr list --state merged --label enhancement --limit 100 --json number,title --jq '.[] | "- \(.title) (#\(.number))"')
          
          # Fixes
          FIXES=$(gh pr list --state merged --label bug --limit 100 --json number,title --jq '.[] | "- \(.title) (#\(.number))"')
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "## What's Changed" >> $GITHUB_OUTPUT
          
          if [ ! -z "$FEATURES" ]; then
            echo "### ✨ New Features" >> $GITHUB_OUTPUT
            echo "$FEATURES" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
          fi
          
          if [ ! -z "$FIXES" ]; then
            echo "### 🐛 Bug Fixes" >> $GITHUB_OUTPUT
            echo "$FIXES" >> $GITHUB_OUTPUT
          fi
          
          echo "EOF" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Create a release
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.event.inputs.version }}
          release_name: Release v${{ github.event.inputs.version }}
          body: ${{ steps.collect_prs.outputs.changelog }}